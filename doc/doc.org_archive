#    -*- mode: org -*-


Archived entries from file /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/doc.org


Archived entries from file /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/doc.org


* Custom architecture
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-02-13 Wed 17:08
  :ARCHIVE_FILE: /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/doc.org
  :ARCHIVE_OLPATH: Ideas to revisit when the time comes
  :ARCHIVE_CATEGORY: doc
  :END:
  Instead of sticking with the =SimpleSUMESwitch(parser, pipeline, deparser)=
  architecture, it might be useful to define a custom architecture designed
  specifically for SCION. This might be for example something like:
  #+begin_src p4_16
  ScionSUMESwitch(
      my_parser,
      my_path_verification,
      my_pipeline,
      my_deparser
  )
  #+end_src

  ...Or maybe (this might be a terrible idea): explicitly separate the
  intra-AS and inter-AS thing:
  #+begin_src p4_16
  ScionSUMESwitch(
      my_intraAS_parser,     // handles the intra-AS encapsulation: in our case, IP + UDP (but could be e.g. MPLS for other ASs)
      my_scion_parser,       // parses the SCION header
      my_path_verification,  // read-only; handles the path verification
      my_pipeline,           // updates the "next segment" pointers and picks the output port
      my_scion_deparser      // deparses the SCION header
      my_intraAS_deparser    // adds the intra-AS encapsulation
  )
  #+end_src
  (For this case we might want a hardcoded component that dispatches to the
  intra-AS en/decapsulation only if needed ==> gets non-trivial. So that's why
  it's maybe a terrible idea)

  Before spending time on this, I should:

*** TODO find out whether there actually are performance advantages to custom architectures
*** TODO talk to people about whether this is a good idea and what is a good architecture
