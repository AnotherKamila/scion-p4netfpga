#+SEQ_TODO: NEXT TODO INPR WAIT | DONE NOPE
#+PROPERTY: Effort_ALL 0 0:15 1:00 2:00 4:00 8:00
#+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM

* Timeline/Snippets
  everything will take 2x as long ==> 6 months :D
*** DONE [3/3] week 1: Getting started
    CLOSED: [2019-01-30 Wed 17:52]
******* DONE read Seyedali's documentation
        CLOSED: [2019-01-20 Sun 12:07]
        ==> background brain
******* DONE read NetFPGA documentation
        CLOSED: [2019-01-22 Tue 11:32]
        [[*SDNet + P4-SDNet]]
******* DONE set up repo skeleton
        CLOSED: [2019-01-23 Wed 16:39]
*** DONE [4/4] week 2
    CLOSED: [2019-02-05 Tue 18:49]
***** DONE Figure out the project structure
      CLOSED: [2019-01-29 Tue 18:43]
***** DONE Make things compile with the new repo structure
      CLOSED: [2019-02-04 Mon 15:28]
***** DONE get some SCION packets
      CLOSED: [2019-01-23 Wed 19:35]
      captured stuff from my SCION VM, lives in testdata/*.pcap
***** Made significant progress on [[*Write the parser][Write the parser]], but...
***** DONE NEW! Terrible terrible things: see [[*P4 spec compatibility (or lack thereof)][P4 spec compatibility (or lack thereof)]]
      Will talk to Benjamin on <2019-02-05 Tue>. Tentative plan for next weeks follows.
*** DONE [3/3] week 3: Figure out the parser despite setbacks
    CLOSED: [2019-02-13 Wed 12:06]
***** DONE Figure out how to create custom architectures
      CLOSED: [2019-02-05 Tue 18:43]
      Currently there's no way to do that: the architectures are built into the
      compiler, and I don't have the Xilinx compiler's source code.

      I can hopefully use XilinxStreamSwitch with a bit of poking at the Verilog
      wrapper module.
***** NOPE Create a ~packet_mod~-enabled architecture
      Equivalent to SimpleSumeSwitch but with packet_mod for the deparser.
      Rejected because not possible; will use ~XilinxStreamSwitch~.
***** DONE update [[*P4 spec compatibility (or lack thereof)]]
      CLOSED: [2019-02-13 Wed 12:06]
      make it actually correspond to reality:
       - Xilinx is working on a new compiler, old one sucks and will continue
         sucking, new one doesn't have an officially released timeline, so we're
         stuck with the one that sucks
       - wanted to use a custom architecture but that's baked into the compiler
         => nope
       - can use ~XilinxStreamSwitch~, will need to modify wrapper thingy in some
         unknown way (no docs)
***** DONE [2/2] Write the parser: 1/2
      CLOSED: [2019-02-09 Sat 16:23]
      With the fancy idea for using ~packet_mod~ if possible and variable-length
      fields in a "skip" struct otherwise.
******* DONE Parse SCION Common Header
        CLOSED: [2019-02-02 Sat]
******* DONE Parse SCION Address Header
        CLOSED: [2019-02-05 Tue 18:44]
        The 8-byte alignment was super annoying because SDNet.
*** INPR [0/4] Make it run on real HW
***** WAIT [2/3] Test the toolchain: Complete the =switch_calc= exercise
******* DONE Simulation
        CLOSED: [2019-02-13 Wed 12:17]
******* DONE Synthesis
        CLOSED: [2019-02-13 Wed 12:16]
        The `master` branch of the NetFPGA repo is broken, but `vivado-2018.2`
        works. Synthesis finished.
******* WAIT Flash and test
        NetFPGA acting up (can't DMA to it). Waiting for physical access to try
        power cycling the NetFPGA.
***** TODO Add an encaps deparser
***** TODO [0/4] Create the project structure needed for using it
******* TODO make it sim and synth
******* TODO add testdata
******* TODO make it pass the simulation
******* TODO synth and test IRL
*** [0/4] Week 4: Make it forward!
***** TODO [0/2] Write the parser: 2/2
      With the fancy idea for using ~packet_mod~ if possible and variable-length
      fields in a "skip" struct otherwise.
******* TODO Parse current SCION Info Field
******* TODO Parse current SCION Hop Field + next HF if VRFY_ONLY
***** NEXT [0/2] Write the deparsers
******* TODO "normal" deparser
******* NEXT ~packet_mod~ deparser
***** TODO Make it possible to use ~XilinxStreamSwitch~ on the NetFPGA
      No longer stuck on license. Should try this ASAP.
***** TODO Test it
*** [0/4] week 5: implement SCION path verification ==> AES       :dataplane:
***** TODO find 3rd party AES module                                    :aes:
      make it easily replaceable with commercial solutions
      ==> don't worry about side channels (not my problem) :D
***** TODO add AES as an extern to P4
***** TODO test that AES works                                          :aes:
***** TODO wire it together: implement and test path verification :dataplane:
*** [0/1] weeks 6-7: complete SCION forwarding                    :dataplane:
***** [1/4] Deploy (existing) P4 router                             :intraAS:
******* DONE find the router
        CLOSED: [2019-01-22 Tue 11:46]
        https://github.com/p4lang/switch
******* TODO figure out which parts we want and split them out
******* TODO stuff it in
******* TODO test it
***** TODO evaluate it: does it work?
      how?
*** week 8: re-structure the code properly [0/1]
***** TODO put the parts that should be easy to switch into separate files:
      Right now I separate by function (parsers, headers, etc). I should be
      separating by concern (intra-AS, inter-AS, ...).
       - SCION encapsulation
       - IP stack
       - SCION core
*** [/] weeks 9-12: Performance                                   :dataplane:
    How fast is it? Where are the bottlenecks? Can we make it faster?
***** TODO see [[*Custom architecture]]
*** [/] week 13: deploy in production
* Project breakdown
*** Data plane
***** Progress overview:
      |-----------+----------------------+--------------------+---------------------------------------|
      |           |       Parsing        |     Validation     |              Forwarding               |
      |-----------+----------------------+--------------------+---------------------------------------|
      | [[base case]] |         DONE         | [[Crypto]]; [[Timestamps]] |                 DONE                  |
      | [[XOVER]]     | [[Read the XOVER flag]]  |      as above      |      [[Move the pointers correctly]]      |
      | [[UP]]        |   [[Read the UP flag]]   |      as above      | [[Swap the interfaces before forwarding]] |
      | [[VRFY_ONLY]] | [[Parse out the 2nd HF]] | [[Verify the 2nd HF]]  |                   -                   |
      |-----------+----------------------+--------------------+---------------------------------------|
      |           |         <c>          |        <c>         |                  <c>                  |
***** [2/6] base case
******* INPR parsing                                                :parsing:
********* [1/1] Meta
*********** DONE get some SCION packets
            CLOSED: [2019-01-23 Wed 19:35]
            captured stuff from my SCION VM, lives in testdata/*.pcap
********* [3/3] ~packet_mod~
*********** DONE Figure out how to create custom architectures
            CLOSED: [2019-02-05 Tue 18:43]
            Currently there's no way to do that: the architectures are built into the
            compiler, and I don't have the Xilinx compiler's source code.

            I can hopefully use XilinxStreamSwitch with a bit of poking at the Verilog
            wrapper module.
*********** NOPE Create a ~packet_mod~-enabled architecture
            Equivalent to SimpleSumeSwitch but with packet_mod for the deparser.
            Rejected because not possible; will use ~XilinxStreamSwitch~.
*********** DONE [5/5] Make it possible to use ~XilinxStreamSwitch~ on the NetFPGA
            CLOSED: [2019-02-18 Mon 22:04] SCHEDULED: <2019-02-14 Thu>
            No longer stuck on license. Should try this ASAP.
            See also [[*Turning source code into bits in the FPGA]] (and fill it in)
************* DONE switch the P4 source code and make it compile
              CLOSED: [2019-02-14 Thu 15:34] SCHEDULED: <2019-02-14 Thu>
************* DONE Turn SDNet into HDL: make the =sdnet= compiler happy
              CLOSED: [2019-02-14 Thu 22:40] SCHEDULED: <2019-02-14 Thu>
************* DONE make Vivado sim pass
              CLOSED: [2019-02-16 Sat 10:44] SCHEDULED: <2019-02-15 Fri>
************* DONE wrap the SDNet module
              CLOSED: [2019-02-18 Mon 22:04] SCHEDULED: <2019-02-17 Sun>
************* DONE make it synth
              CLOSED: [2019-02-18 Mon 22:04] SCHEDULED: <2019-02-14 Thu>
********* [5/6] Write the parser
          With the fancy idea for using ~packet_mod~ if possible and variable-length
          fields in a "skip" struct otherwise
************* DONE Parse SCION Common Header
              CLOSED: [2019-02-02 Sat]
************* DONE Parse SCION Address Header
              CLOSED: [2019-02-05 Tue 18:44]
              The 8-byte alignment was super annoying because SDNet.
************* DONE Parse current Info Field
              CLOSED: [2019-03-17 Sun 17:46] SCHEDULED: <2019-03-14 Thu>
************* DONE Parse current Hop Field
              CLOSED: [2019-03-17 Sun 17:46] SCHEDULED: <2019-03-14 Thu>
************* DONE Parse previous Hop Field
              CLOSED: [2019-03-26 Tue 18:12] SCHEDULED: <2019-03-26 Tue>
************* DONE implement sqrt(area) idea
              SCHEDULED: <2019-04-02 Tue>
************* INPR Fix timing violation
              SCHEDULED: <2019-04-03 Wed>
********* [2/2] Write the deparser
          with + without packet_mod
*********** DONE deparse encaps+common+address
            CLOSED: [2019-03-17 Sun 17:55] SCHEDULED: <2019-03-14 Thu>
            with + without packet_mod;
            make it compile
*********** DONE deparse info+HF
            CLOSED: [2019-03-17 Sun 17:55] SCHEDULED: <2019-03-14 Thu>
******* DONE forwarding                                          :forwarding:
        CLOSED: [2019-03-17 Sun 18:23]
********* DONE do something reasonable about interface numbering
          CLOSED: [2019-03-17 Sun 17:57] SCHEDULED: <2019-03-15 Fri>
********* DONE forward base case
          CLOSED: [2019-03-17 Sun 18:15] SCHEDULED: <2019-03-18 Mon>
******* INPR [9/10] Crypto                                       :validation:
        CLOSED: [2019-04-02 Tue 13:09]
********* DONE Figure out how the crypto works                          :aes:
          CLOSED: [2019-03-18 Mon 12:48] SCHEDULED: <2019-03-18 Mon>
          sig = MAC_K(timestamp || flags' || exptime || in_if || eg_if || HF')
          where flags' = flags & immutable_flags_mask,
                HF'    is the previous hop field without flags,
                K      is an AS-local symmetric key => comes from the control plane
                MAC    is AES-CMAC, RFC4493 pages 353 and 385 <= ref 226 from SCION book
********* DONE Write P4 code (with blanks) that does it                 :aes:
          CLOSED: [2019-03-25 Mon 18:34]
          rewrite https://github.com/SecureAuthCorp/impacket/blob/master/impacket/crypto.py#L93
          into P4
          SCHEDULED: <2019-03-19 Tue>
********* DONE Define the AES extern's interface                        :aes:
          CLOSED: [2019-03-18 Mon 17:17] SCHEDULED: <2019-03-18 Mon>
********* DONE Generate the extern stubs                            :externs:
          CLOSED: [2019-03-20 Wed 19:28] SCHEDULED: <2019-03-18 Mon>
********* DONE *Placeholder verilog for AES*                        :externs:
          CLOSED: [2019-03-22 Fri 14:44]
          something that always returns a fixed value so I can compile it
          => "minor milestone" when it runs
********* DONE find 3rd party AES module                                :aes:
          CLOSED: [2019-03-17 Sun 18:48] SCHEDULED: <2019-03-22 Fri>
          make it easily replaceable with commercial solutions
          ==> don't worry about side channels (not my problem) :D
          thanks to the Leuven people :D
********* DONE give stubs + info to Leuven people                       :aes:
          CLOSED: [2019-03-22 Fri 14:44]
********* DONE Integrate actual AES                                     :aes:
          CLOSED: [2019-03-25 Mon 13:26] SCHEDULED: <2019-03-25 Mon>
********* DONE *test path verification*                :milestone:validation:
          CLOSED: [2019-04-02 Tue 13:04] SCHEDULED: <2019-03-27 Wed>
********* TODO Fix timing violation
          SCHEDULED: <2019-04-04 Thu>
******* TODO [0/4] Timestamps                                    :validation:
********* TODO write code with placeholders
          SCHEDULED: <2019-04-03 Wed>
********* TODO get time into the switch                             :externs:
          SCHEDULED: <2019-04-04 Thu>
          This should be an extern not dissimilar to the ~reg_rw~ one, but
          additionally counting clock cycles.
          => It makes sense to not do it before [[*Generate the extern stubs]].
          
          It might be useful to email p4-dev that we might want a standard way
          to get time.

          --------------------------------------------
          
          Actually, there is [[https://github.com/NetFPGA/P4-NetFPGA-public/wiki/Timestamp-Extern-Function][a timestamp extern]]. Might be simpler to just use
          that + offset register (written by control plane).
********* TODO generate control-plane API
          SCHEDULED: <2019-04-04 Thu>
********* TODO *validate the timestamps*
          SCHEDULED: <2019-04-10 Wed>
******* TODO Anything else that needs validation? Figure out :D  :validation:
******* TODO Measure performance
        SCHEDULED: <2019-04-05 Fri>
        Prepare everything this week so we can just bring things to the traffic
        generator on Monday.
***** [0/2] XOVER
******* NEXT Read the XOVER flag                                    :parsing:
        :PROPERTIES:
        :Effort:   0:15
        :END:
******* NEXT Move the pointers correctly                         :forwarding:
***** [0/2] UP
******* TODO Read the UP flag                                       :parsing:
        :PROPERTIES:
        :Effort:   0
        :END:
******* TODO Swap the interfaces before forwarding               :forwarding:
        :PROPERTIES:
        :Effort:   0:15
        :END:
***** [0/2] VRFY_ONLY
******* TODO Read the VRFY_ONLY flag                                :parsing:
        :PROPERTIES:
        :Effort:   0
        :END:
******* TODO Parse out the 2nd HF                                   :parsing:
        :PROPERTIES:
        :Effort:   2:00
        :END:
      ------------------------------------------------
      
***** [1/5] IP and below
******* DONE find the router
        CLOSED: [2019-01-22 Tue 11:46]
        https://github.com/p4lang/switch
******* TODO figure out which parts we want and split them out
        SCHEDULED: <2019-04-22 Mon>
        probably only L2 learning
******* TODO stuff in IP and below
        SCHEDULED: <2019-04-17 Wed>
******* TODO test it
        SCHEDULED: <2019-04-25 Thu>
***** [1/4] Code hygiene
******* DONE Set the tuples thing on fire / fix simulation
        CLOSED: [2019-04-02 Tue 13:07] SCHEDULED: <2019-04-01 Mon>
******* TODO Write =@brief("blah")= and =@description("blah blah")= annotations
******* TODO put the parts that should be easy to switch into separate files:
        SCHEDULED: <2019-04-22 Mon>
        Right now I separate by function (parsers, headers, etc). I should be
        separating by concern (intra-AS, inter-AS, ...).
         - SCION encapsulation
         - IP stack
         - SCION core
******* TODO document =TARGET_SUPPORTS_*= stuff
        SCHEDULED: <2019-04-23 Tue>
***** [0/2] Prod ready
******* TODO Figure out error handling :D
******* TODO Do not generate error packets on SCMP packets
        => must check whether this is SCMP before sending error
*** Control plane
***** TODO think about forwarding :D
      SCHEDULED: <2019-04-11 Thu>
*** Directory + make structure
***** [2/3] Directory structure
******* DONE set up repo skeleton
        CLOSED: [2019-01-23 Wed 16:39]
******* DONE Figure out the high-level repo structure
        CLOSED: [2019-01-29 Tue 18:43]
******* TODO Rename nf_sume_sdnet_ip to nf_sume_scion_ip
        to prevent the "other stuff on the machine is breaking my build" failure mode
***** [1/1] Change to non-project mode
      build it yourself!
******* DONE read [[UG892]], [[UG896]]
        CLOSED: [2019-03-06 Wed 15:12] SCHEDULED: <2019-03-04 Mon>
***** [8/8] Makefiles cleanup
******* DONE Make things compile with the new repo structure
        CLOSED: [2019-02-04 Mon 15:28]
******* DONE make it sim
        CLOSED: [2019-02-17 Sun 12:33] SCHEDULED: <2019-02-18 Mon>
******* DONE make it synth
        CLOSED: [2019-02-18 Mon 22:03] SCHEDULED: <2019-02-18 Mon>
******* DONE make it flash!
        SCHEDULED: <2019-02-18 Mon>
******* DONE Change =make clean= to just rm things listed in .gitignore
        SCHEDULED: <2019-03-04 Mon>
        because having two sources of truth is annoying and Bad
******* DONE Clean up horrible mess in platforms/netfpga
        CLOSED: [2019-03-18 Mon 11:38] SCHEDULED: <2019-03-12 Tue>
******* DONE Add a test for real HW (check what they have, or use scapy)
        CLOSED: [2019-03-18 Mon 10:25] SCHEDULED: <2019-03-14 Thu>
******* DONE Add a "check timing" target
        CLOSED: [2019-03-18 Mon 10:25] SCHEDULED: <2019-03-11 Mon>
        something like:
        ~set pass [expr {[get_property SLACK [get_timing_paths]] >= 0}]~
*** [0/3] Performance
***** TODO Measure performance of the complete thing
      SCHEDULED: <2019-04-20 Sat>
      how?
***** TODO Find bottlenecks
      SCHEDULED: <2019-04-21 Sun>
***** TODO Can we make it faster?
      SCHEDULED: <2019-04-22 Mon>
      if needed
*** [6/6] Real HW
***** DONE read Seyedali's documentation
      CLOSED: [2019-01-20 Sun 12:07]
      ==> background brain
***** DONE read NetFPGA documentation
      CLOSED: [2019-01-22 Tue 11:32]
      [[*SDNet + P4-SDNet]]
***** DONE [3/3] Test the toolchain: Complete the =switch_calc= exercise
      CLOSED: [2019-02-14 Thu 15:03]
******* DONE Simulation
        CLOSED: [2019-02-13 Wed 12:17]
******* DONE Synthesis
        CLOSED: [2019-02-13 Wed 12:16]
        The `master` branch of the NetFPGA repo is broken, but `vivado-2018.2`
        works. Synthesis finished.
******* DONE [#A] Flash and test
        CLOSED: [2019-02-14 Thu 15:01] SCHEDULED: <2019-02-14 Thu>
        NetFPGA was acting up (couldn't DMA to it, didn't see the PCI device). 
        Fixed by:
         1. Pushing the reset button. (It's one of the 3 buttons, just push all 3 :D)
         2. Powering off the host machine, including pulling out the power cable.
         3. Rebooting the host machine (without power off).
        Afterwards, it flashed successfully.

        Test fails, unsure why. Don't care enough.
***** DONE add testdata
      CLOSED: [2019-03-17 Sun 17:41] SCHEDULED: <2019-03-15 Fri>
***** DONE make it pass the simulation
      CLOSED: [2019-03-17 Sun 17:41] SCHEDULED: <2019-03-18 Mon>
***** DONE synth and test IRL
      CLOSED: [2019-03-17 Sun 17:41] SCHEDULED: <2019-03-22 Fri>
*** [/] Production deployment
    SCHEDULED: <2019-05-01 Wed>
* Timeline summaries
*** DONE beginning - <2019-02-06 Wed>
    CLOSED: [2019-02-07 Thu 10:18]
Progress report until now:

 - Background research:
   - read NetFPGA and Xilinx compiler docs, got familiar with the workflow
   - got more familiar with the details of SCION: got a VM from SCIONLab, sniffed
     packets, re-read parts of the SCION book with P4 and NetFPGA in mind
   - Read Seyedali's documentation (scion-netfpga project)
   - background reading on FPGAs: building intuition; workflow; timing issues; etc.
     (Needed because while P4 abstracts away the logic, it does not automate all
     FPGA design tasks.)
 - Planning ahead: thought about project structure, modularity, portability.
   (I will support both the P4 software switch and NetFPGA, to ease testing and
   to force this project to be easily portable to other HW platforms.)
 - Made progress on writing the SCION packet parser.
 - Discovered a major problem and after many attempts found a workaround that might
   actually work:

   TL;DR: The NetFPGA can't deal with variable length headers, such as the SCION
   path. Get around it by sacrificing FPGA area (we have plenty) and using a
   non-standard P4 extension.

   Longer version:

   The NetFPGA's P4 compiler does not support doing anything with
   variable-length headers (not even skipping them).
   (The background info gained by talking to NetFPGA people is that Xilinx is
   not fixing the old compiler, but writing a new one. I cannot rely on the new
   compiler being released in time, hence the workaround.)

   How I am planning to solve this:

   1. Assume a max path length K, let's say K = 30. Use the C preprocessor to
      "unroll" the parsing: create K separate parser states that parse a 1-hop
      segment, a 2-hop segment, etc (compile-time known value, so that works).
      The NetFPGA has plenty of space.
   2. While the SCION path can be arbitrarily long, my BR only needs to look at
      either 1 or 2 hops. Therefore I can skip the rest and only use O(1) buffer
      space per state, not O(K). Thereby I can avoid an O(K^2) blowup and fit a
      bigger K. (The NetFPGA is big, but not infinite).
   3. Standard P4 does not allow me to emit headers I haven't parsed. Therefore
      I will use the experimental `packet_mod` feature to avoid losing the
      skipped parts.
   4. Using `packet_mod` requires deviating from the "usual" NetFPGA Verilog
      wrappers, but my initial research suggests that this should be doable in
      less than 1 day of work. Therefore, worth trying.
   5. Bonus: `packet_mod` should help with parser and deparser performance.
   6. Backup plan if `packet_mod` turns out to be too experimental to work: Live
      with the O(K^2) blowup until the new compiler comes out. Make it easy to
      switch to it (yay portability).

Next steps:

Still waiting for the license. Can't confirm that `packet_mod` works as expected
until then.
Meanwhile, writing the parser assuming one of {fully compliant P4 compiler, the
`packet_mod` feature}. If it turns out I have neither of those, it will be <2
extra days of work to make it work without them with the O(K^2) blowup.
*** DONE progress report <2019-02-20 Wed>
    CLOSED: [2019-03-04 Mon 15:40]
This is a summary of what happened since my last progress report.

The main news is that my modified design is happily running on the physical
hardware.

 * Working with the real hardware:
   - Discovered, reported, and overcame several problems with the upstream
     P4-NetFPGA repo's workflow.
   - Tested, understood, adapted, and documented the complete (surprisingly
     complicated!) process of making P4 run on the NetFPGA.
   - Overcame issues with the NetFPGA and managed to flash and test it
     successfully.
 * `XilinxStreamSwitch`: "Experimental" architecture that helps with variable
   length parsing + improves performance
   - Adapted the hardware design to make it possible to use `XilinxStreamSwitch`
     on the NetFPGA.
   - Tested `XilinxStreamSwitch` in real life and verified the basic
     functionality.
 * Improved project structure to make this repo easy to work with (unlike the
   upstream P4-NetFPGA repository).
 * Added basic testing infrastructure: behavioural simulation + real HW.
*** DONE progress report <2019-03-06 Wed>
    CLOSED: [2019-03-07 Thu 10:51]
This is a summary of what happened since my last progress report.

I was travelling, so this time it is somewhat shorter, but the tasks I completed
are important for the future users of this project (including me).

 1. Learned a lot about the Xilinx Vivado toolchain
 2. Completely rewrote the build process: Now it is simplified and fully automated, instead of being a weird combination of Makefiles and clicking in Vivado IDE
 3. Fixed a major "stale state is tainting the build" problem (inherited from the NetFPGA template)
 4. Learned some more Verilog basics and fixed a bug in NetFPGA Verilog wrappers
 5. Probably really made XilinxStreamSwitch/packet_mod work (point 3's problem had been hiding an issue with it)
*** DONE progress report <2019-03-25 Mon>
    CLOSED: [2019-03-25 Mon 14:05]
 - Completed and tested parsing and forwarding for the base case
   - parser can deal with SCION path by using the "generate separate parser blocks for every offset" trick
   - currently uses O(N) FPGA area where N is the max path length we support, but I have an idea to make it O(sqrt(N))
 - Integrated Seyedali's AES implementation
   - this is ECB => I will implement CMAC in P4 on top of it
 - Created a fully controllable SCION packet generator with Scapy and used it to test and debug the P4 code
   (will add it to SCION repo after cleanup)
 - Dealt with two bugs in NetFPGA wrappers

Next steps:
 - implement CMAC and test HF verification (for the base case)
 - implement the other forwarding cases
 - add control plane API that tells the switch the current time and implement timestamp validation
*** NEXT progress report <2019-04-10 Wed>
TODO progress table snapshot

 - implemented a simplified single-block AES-CMAC in P4
 - extended parser to also parse the previous HF
 - *implemented HF MAC verification*
 - fixed a source of multiple bugs in NetFPGA's test data framework by deleting it (I wrote my own instead, because it wasn't worth fixing)
 - variable length parser: implemented an idea to unroll the loop of two stages with O(sqrt(N)) states instead of the trivial O(N) states
   TODO build commit 263adb9 and compare with thing in commit message

* Questions for Benjamin
*** NOPE gimme 4 cables
    CLOSED: [2019-03-18 Mon 11:41] SCHEDULED: <2019-03-13 Wed>
*** TODO Should we also add an "L2 learning switch"?
    ARP + remembering MAC addresses
*** Archive:
***** DONE Is Scion *always* encapsulated? And is it always in IP/UDP?
      CLOSED: [2019-01-30 Wed 18:48]
      for now yes; eventually no
***** DONE => What is expected of me? What packets should I be able to process?
      CLOSED: [2019-01-30 Wed 14:58]
      this can also go into thesis/documentation
      SCION only
***** DONE what to do about packets which aren't SCION?
      CLOSED: [2019-01-30 Wed 14:59]
      for now drop is good
***** DONE LICENSE?
      CLOSED: [2019-01-30 Wed 14:59]
      check scion repo
***** DONE [[P4 spec compatibility (or lack thereof)]]
      CLOSED: [2019-02-13 Wed 16:53]
* Questions about FPGAs
*** DONE VHDL vs Verilog: what's the relationship?
    CLOSED: [2019-01-23 Wed 11:05]
    Both are hardware description languages. VHDL smells a little more like Ada
    and Verilog smells a little more like C. As far as I can tell, Verilog is
    slightly more popular in FPGA circles. Most Xilinx tooling will be using
    Verilog.

    You can combine modules written in either as long as you know what the
    interfaces are. A bit like you can link things written in different
    languages in software too.
*** DONE How do you do modular design? Literally "LEGO submodules"?
    CLOSED: [2019-01-23 Wed 11:05]
    Generally, you will want a bus like AMBA or Axi and your modules will talk
    to each other on the bus using well-defined protocols.
*** DONE What does IP stand for in FPGA context?
    CLOSED: [2019-01-20 Sun 11:42]
    "intelectual property core" ==> something that you buy from someone else and
    integrate in your design.

    Can be pronounced "module" or even "chip".

    Blocks may be more or less independent. You could add e.g. a microblaze cpu
    to your design. It will have its own clock domains and talk to other modules
    using memory. Or you might have something like AES which operates in your
    data path.
*** TODO Gimme a nice paper about implementing something on an FPGA in a nice way.
    So that I can do my learning by example thing.
*** TODO What's this thing about 8 bytes? How general is it?
*** DONE How do I find out if it's optimal?
    CLOSED: [2019-01-23 Wed 11:08]
    This P4 stuff will compile into something that will light up different parts
    of the FPGA at different times. I want to:
      - look at it
      - figure out whether it could be parallelising some more
      - tell it to do better (maybe :D)

    Supposedly the Vivado tools help with that. I should revisit this once I get
    the license crap to work.
* HW documentation
*** SDNet + P4-SDNet
    downloaded from: https://www.xilinx.com/products/design-tools/software-zone/sdnet.html#documentation
     1. Read this first: [[./hw-doc/ug1252-p4-sdnet.pdf][P4-SDNet]]
     2. Read this when you want to make your own externs: [[./hw-doc/ug1012-sdnet-packet-processor.pdf][SDNet]]
*** Vivado
***** UG892
***** UG896
* Ideas to revisit when the time comes
*** Eventual code-related TODOs:
***** TODO README files everywhere
      every directory should have a README file
      (maybe generated? :-o)
***** TODO LICENSE files everywhere
      check SCION repo for which
***** TODO [0/2] Optimisation
******* TODO check all parameters: in/out/inout
******* TODO check all parameters: are they actually used?
        actually, first check whether the compiler warns for unused
* Notes to self
*** about NetFPGA
***** Annotations:
       apparently there is a pile of @Xilinx_whatever annotations which look
       like they affect how the things are laid out on the FPGA
       ==> documented in P4-SDNet
***** Architecture:
      #+BEGIN_SRC p4_16
      SimpleSumeSwitch(
          TopParser(),
          TopPipe(),
          TopDeparser()
      ) main;
      #+END_SRC
***** Registers:
      Accessing registers doesn't exist :D
      They have an extern which is one function where an argument says whether
      it's a read or a write, and there is just one register:
      #+begin_src p4_16
      const_reg_rw(
          index,
          value_to_be_written, // probably bit<
          r_or_w,  // bit<8>
          value_will_be_read_into_here
      );
      #+end_src
      Actually this is a bit weird and confusing.
***** Testing things
      You generate pcap files with input packets and expected
      output packets. (Not sure if the expected packets are an exact match or
      what.)

      The neat thing about that: there's a pcap2axi thing, so the packets are
      replayed from memory. Therefore...
***** Performace testing
      Just make a big pcap file :D ^^
***** DONE Turning source code into bits in the FPGA
      CLOSED: [2019-02-18 Mon 22:05] SCHEDULED: <2019-02-14 Thu>: complete this
       1. ~p4c-sdnet~ converts P4 into the SDNet language, which is a Xilinx
          thing that looks a little like C++. Check out .sdnet files.
          Makefile target: ~sdnet~
          *Important thing to note: the compiler will not generate control ports
          unless there's at least one table that's actually used in the design.
          With the current flags, that means that the compilation will fail
          without tables.*
       2. ~sdnet~ compiles the .sdnet file into a module/IP core that then
          goes into Vivado. I can pick the bus type as a compiler flag (sample
          project makefile has Axi).
          Makefile target: ~module~ (doesn't exist yet, TODO)
          From now on it's the usual FPGA workflow.
       3. check with Vivado sim: generate input and output packets and tuples
          and compare.
          Tuples are the ~switch_meta_t~ struct.
          Target: ~sim~
       4. Create Vivado project: Target: ~project~
       5. Synth. Target: ~synth~
       6. Create bitfile. Target: ~bitfile~
       7. Flash! Target: ~flash~
***** Interfaces numbering:
bit     0       1       2       3       4       5       6       7
value   01      02      04      08      16      32      64      128
if      eth0    nf0     eth1    nf1             nf2             nf3
*** documentation
***** TODO SCION Parser
***** TODO portability
***** NEXT Enabling ~XilinxStreamSwitch~
       1. change the includes and ~main~ :D
       2. different signature (tuples); therefore:
          * testdata: your digest is now not separate from switch_meta => no space
          * verilog module: digest and rest is now together on one bus
* Things to write about
*** Aim: SCION BR
    => only SCION
*** Intro to FPGAs for software people
***** TODO think in space, not time
       - everything happens at the same time
       - TODO didn't I start writing this down somewhere else? either tiddlywiki or website :D -- find it!
***** TODO resources / limiting factors
       - Area instead of # of instructions
*** why I am being awesome (TODO also make it true :D)
***** modularity:
******* easy to swap things in here with other stuff (e.g. replace IP with MPLS)
******* easy to take things from here and put into your switch
******* easy to change functionality without being very sad because things are well separated
***** portability
       - runs on SDNet and v1model and the SCION code doesn't need to change to add a new arch
       - can benefit from features present only on some archs, but doesn't need much rewriting because of ~lib/compat~ and because modularity
***** attention to detail
       - by only passing the parameters I really need instead of the whole metadata or headers struct, I both enforce modularity *and* give the compiler more information about the code so that it can optimise better. TODO would be neat to have an example.
*** Challenges
***** P4 spec compatibility (or lack thereof)
Unfortunately, the SDNet P4 compiler implements only a subset of P4, which has
created unexpected challenges when implementing SCION.
The biggest issue [HOPEFULLY :D] was that at the time of writing, with P4-SDNet
the parser cannot work with any variable-length data: this includes not only
=varbit<n>= types, but also header unions, and -- most importantly -- header
stacks.
Furthermore, it is unable to even skip over variable-length parts of the packet.
Simply put, all packet offsets must be compile-time constants.
This poses a problem for SCION: the path in the packet is variable length (it
can contain any number of hops).[fn:varlen]
Therefore, the parser cannot easily deal with the path in the SCION
packet.[fn:cantparse]

To get around this problem, we employed the following steps:

First of all, we opted to design the parser so that it parses only the actually
needed data: while the path can be arbitrarily long, any single BR only needs to
process $O(1)$ hop fields (usually one, or two in case of a shortcut path).
This not only makes it possible to compile for the NetFPGA, but also improves
performance on other targets.

Next, we needed to solve the problem of emitting headers we have skipped:
using only the standard features
of P4, it is impossible to deparse parts of the header which have not been
parsed. (The payload is copied without being parsed, but the payload is defined
as anything *after* the last thing we parsed -- so if we skip parsing something
in the header, it is lost and we are unable to emit it on the output interface.)

The solution on the NetFPGA is to use the non-standard ~packet_mod~ feature of
P4-SDNet, as this (unlike the standard deparsers) allows to modify the existing
header instead of creating it anew, thereby allowing me to not lose the skipped
parts of the header.

Using the ~packet_mod~ feature is not straightforward, either: we needed to
switch to the ~XilinxStreamSwitch~ architecture, as this feature is not
available in the ~SimpleSumeSwitch~ architecture that is the default on the
NetFPGA.
This required modifying the Verilog wrappers provided by the NetFPGA developers.

Obviously, using a non-standard SDNet-only feature means that with this
approach, the program would not compile on a standard P4 compiler.
However, standard P4 compilers (unlike the P4-SDNet compiler) tend to implement
parsing variable-length headers.
Therefore, we are able to emulate ~packet_mod~ for standard compilers by adding
an extra struct to keep track of the "skipped" parts of the headers, and instead
of skipping them, we parse them into the (variable-length) fields of this extra
struct.

We can use the C preprocessor to hide this difference, thereby keeping our
code portable while being able to use ~packet_mod~ where available.
This not only allows us to parse the variable-length SCION packet on the
currently incomplete P4-SDNet compiler, but also allows us to harness the
performance benefits of the ~packet_mod~ feature on any target where it is
available.

To make this approach work, the last step is to turn all packet offsets,
including the ones used only for skipping, into compile-time constants.
Fortunately, SCION hop fields are constant length.
Therefore, if we assume a maximum path length $K$, let's say $K = 50$, there are
only $O(K)$ many options for how many different sizes we might need to skip.
Therefore, we can use the C preprocessor to "unroll" the parser and create
separate states for skipping $1$, $2$, $…$ hop fields.
This causes an $O(K)$ increase in FPGA area usage, but no latency increase --
our logic becomes wider, but not deeper.

The same tricks must then be applied in the ~packet_mod~ deparser.

The maximum path length $K$ that our BR can handle then becomes a linear
function of the NetFPGA's area (after subtracting the area we use for the rest
of the design): the largest $K$ we can use is determined by what we can fit.
Since our implementation uses the area quite efficiently (TODO number/reference)
and the NetFPGA is rather large, we are able to fit a $K = TODO$ on the NetFPGA
SUME.


[fn:varlen] The SCION host addresses are also variable-length, as the address
type tag in the common header defines what kind of address it is.
For this case, we opted to use the C preprocessor to conditionally replace the
union with a struct with three fixed-length fields (one for each possible type
of address), only one of which is parsed and made valid for a given packet.
(This causes a small increase in FPGA area usage, but any other solution would
be significantly more complex, so this is a good tradeoff.)

[fn:cantparse] In fact, it would be possible to parse the whole SCION packet by
using the C preprocessor to "unroll" the parser at compile time, and parse the
path segments into ~struct~'s with fields such as =hop1=, =hop2=, ... (size
fixed at compile time).
However, this would make actually using the fields very difficult, as I would
need more preprocessor magic to index into such a struct; and additionally it
would drastically increase my FPGA area usage.
*** HW is silly
***** sometimes DMA may need an extra reboot?
* *Thesis*
  This outline is approximate! TODO fix
*** Introduction
*** Related work
*** Overview
***** Overview of the SCION architecture 
***** What we are trying to solve
*** Data plane: Packet forwarding
***** Design/Overview
***** Implementation
***** Challenges <-- this is the interesting part => maybe should be swapped with Implementation?
*** Control plane: Integration with SCION infrastructure
*** Bibliography


    [[./references.bib][references]]
