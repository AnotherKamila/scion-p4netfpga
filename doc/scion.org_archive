#    -*- mode: org -*-


Archived entries from file /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/scion.org


* DONE figure out what's next :D
  CLOSED: [2019-02-14 Thu 22:41] SCHEDULED: <2019-02-14 Thu>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-02-14 Thu 22:41
  :ARCHIVE_FILE: /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Project breakdown/Parsing SCION packets/~packet_mod~/Make it possible to use ~XilinxStreamSwitch~ on the NetFPGA
  :ARCHIVE_CATEGORY: scion
  :ARCHIVE_TODO: DONE
  :END:
See also [[*Turning source code into bits in the FPGA]] (and fill it in)

Archived entries from file /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/scion.org


* DONE figure out what's next :D
  CLOSED: [2019-02-14 Thu 22:41] SCHEDULED: <2019-02-14 Thu>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-02-14 Thu 22:41
  :ARCHIVE_FILE: /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Project breakdown/Parsing SCION packets/~packet_mod~/Make it possible to use ~XilinxStreamSwitch~ on the NetFPGA
  :ARCHIVE_CATEGORY: scion
  :ARCHIVE_TODO: DONE
  :END:

* TODO How do custom architectures work?
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-02-17 Sun 11:48
  :ARCHIVE_FILE: /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Notes to self/about NetFPGA
  :ARCHIVE_CATEGORY: scion
  :ARCHIVE_TODO: TODO
  :END:

* iperf
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-03-17 Sun 17:33
  :ARCHIVE_FILE: /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Notes to self
  :ARCHIVE_CATEGORY: scion
  :END:
scion@netfpga-target:~$ iperf -s -u -p 50000
scion@netfpga-target:~$ iperf -c -u -p 50000
(make sure there is no route through localhost)


TODO bidirectional test

* [2/4] Test it
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-03-17 Sun 18:14
  :ARCHIVE_FILE: /scp:scion-netfpga:/home/scion/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Project breakdown/Data plane/Packet parsing
  :ARCHIVE_CATEGORY: scion
  :END:
  check how to easily generate SCION packets -- there is something in the
  scion repo
*** TODO test encaps+common+address w/ emit
    SCHEDULED: <2019-03-15 Fri>
*** DONE test encaps+common+address w/ packet_mod
    CLOSED: [2019-03-17 Sun 17:56] SCHEDULED: <2019-03-15 Fri>
*** TODO test complete parser w/ emit
    SCHEDULED: <2019-03-15 Fri>
*** DONE test complete parser w/ packet_mod
    CLOSED: [2019-03-17 Sun 17:56] SCHEDULED: <2019-03-15 Fri>

* Aim: SCION BR
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-07-31 Wed 14:07
  :ARCHIVE_FILE: ~/u/projects/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Things to write about
  :ARCHIVE_CATEGORY: scion
  :END:
  => only SCION

* Intro to FPGAs for software people
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-07-31 Wed 14:11
  :ARCHIVE_FILE: ~/u/projects/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Things to write about
  :ARCHIVE_CATEGORY: scion
  :END:
*** TODO think in space, not time
     - everything happens at the same time
     - TODO didn't I start writing this down somewhere else? either tiddlywiki or website :D -- find it!
*** TODO resources / limiting factors
     - Area instead of # of instructions

* HW is silly
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-07-31 Wed 14:12
  :ARCHIVE_FILE: ~/u/projects/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Things to write about
  :ARCHIVE_CATEGORY: scion
  :END:
*** sometimes DMA may need an extra reboot?

* Challenges
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-07-31 Wed 14:13
  :ARCHIVE_FILE: ~/u/projects/scion-p4netfpga/doc/scion.org
  :ARCHIVE_OLPATH: Things to write about
  :ARCHIVE_CATEGORY: scion
  :END:
*** P4 spec compatibility (or lack thereof)
Unfortunately, the SDNet P4 compiler implements only a subset of P4, which has
created unexpected challenges when implementing SCION.
The biggest issue [HOPEFULLY :D] was that at the time of writing, with P4-SDNet
the parser cannot work with any variable-length data: this includes not only
=varbit<n>= types, but also header unions, and -- most importantly -- header
stacks.
Furthermore, it is unable to even skip over variable-length parts of the packet.
Simply put, all packet offsets must be compile-time constants.
This poses a problem for SCION: the path in the packet is variable length (it
can contain any number of hops).[fn:varlen]
Therefore, the parser cannot easily deal with the path in the SCION
packet.[fn:cantparse]

To get around this problem, we employed the following steps:

First of all, we opted to design the parser so that it parses only the actually
needed data: while the path can be arbitrarily long, any single BR only needs to
process $O(1)$ hop fields (usually one, or two in case of a shortcut path).
This not only makes it possible to compile for the NetFPGA, but also improves
performance on other targets.

Next, we needed to solve the problem of emitting headers we have skipped:
using only the standard features
of P4, it is impossible to deparse parts of the header which have not been
parsed. (The payload is copied without being parsed, but the payload is defined
as anything *after* the last thing we parsed -- so if we skip parsing something
in the header, it is lost and we are unable to emit it on the output interface.)

The solution on the NetFPGA is to use the non-standard ~packet_mod~ feature of
P4-SDNet, as this (unlike the standard deparsers) allows to modify the existing
header instead of creating it anew, thereby allowing me to not lose the skipped
parts of the header.

Using the ~packet_mod~ feature is not straightforward, either: we needed to
switch to the ~XilinxStreamSwitch~ architecture, as this feature is not
available in the ~SimpleSumeSwitch~ architecture that is the default on the
NetFPGA.
This required modifying the Verilog wrappers provided by the NetFPGA developers.

Obviously, using a non-standard SDNet-only feature means that with this
approach, the program would not compile on a standard P4 compiler.
However, standard P4 compilers (unlike the P4-SDNet compiler) tend to implement
parsing variable-length headers.
Therefore, we are able to emulate ~packet_mod~ for standard compilers by adding
an extra struct to keep track of the "skipped" parts of the headers, and instead
of skipping them, we parse them into the (variable-length) fields of this extra
struct.

We can use the C preprocessor to hide this difference, thereby keeping our
code portable while being able to use ~packet_mod~ where available.
This not only allows us to parse the variable-length SCION packet on the
currently incomplete P4-SDNet compiler, but also allows us to harness the
performance benefits of the ~packet_mod~ feature on any target where it is
available.

To make this approach work, the last step is to turn all packet offsets,
including the ones used only for skipping, into compile-time constants.
Fortunately, SCION hop fields are constant length.
Therefore, if we assume a maximum path length $K$, let's say $K = 50$, there are
only $O(K)$ many options for how many different sizes we might need to skip.
Therefore, we can use the C preprocessor to "unroll" the parser and create
separate states for skipping $1$, $2$, $â€¦$ hop fields.
This causes an $O(K)$ increase in FPGA area usage, but no latency increase --
our logic becomes wider, but not deeper.

The same tricks must then be applied in the ~packet_mod~ deparser.

The maximum path length $K$ that our BR can handle then becomes a linear
function of the NetFPGA's area (after subtracting the area we use for the rest
of the design): the largest $K$ we can use is determined by what we can fit.
Since our implementation uses the area quite efficiently (TODO number/reference)
and the NetFPGA is rather large, we are able to fit a $K = TODO$ on the NetFPGA
SUME.


[fn:varlen] The SCION host addresses are also variable-length, as the address
type tag in the common header defines what kind of address it is.
For this case, we opted to use the C preprocessor to conditionally replace the
union with a struct with three fixed-length fields (one for each possible type
of address), only one of which is parsed and made valid for a given packet.
(This causes a small increase in FPGA area usage, but any other solution would
be significantly more complex, so this is a good tradeoff.)

[fn:cantparse] In fact, it would be possible to parse the whole SCION packet by
using the C preprocessor to "unroll" the parser at compile time, and parse the
path segments into ~struct~'s with fields such as =hop1=, =hop2=, ... (size
fixed at compile time).
However, this would make actually using the fields very difficult, as I would
need more preprocessor magic to index into such a struct; and additionally it
would drastically increase my FPGA area usage.

* *Thesis*
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-07-31 Wed 14:14
  :ARCHIVE_FILE: ~/u/projects/scion-p4netfpga/doc/scion.org
  :ARCHIVE_CATEGORY: scion
  :END:
  *moved to gingko* for now => will re-import once I am more or less sure of the outline
*** Introduction
*** Related work
*** Overview
***** Overview of the SCION architecture 
***** What we are trying to solve
*** Data plane: Packet forwarding
***** Design/Overview
***** Implementation
***** Challenges <-- this is the interesting part => maybe should be swapped with Implementation?
*** Control plane: Integration with SCION infrastructure
*** Bibliography


    [[./references.bib][references]]
